# -*- coding: utf-8 -*-
"""Machine_Learning_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OrSjKwcNeE1MTT17ATuY7C-6oO9DHfYH
"""

#Needed to mount the Google Drive to Access CSV Values
# from google.colab import drive
# drive.mount('/content/drive')

import numpy as np
import pandas as pd
import csv
import re
from datetime import datetime

#Load in Met Eireann Data
me = pd.read_csv('hly175_data.csv')
#Make File Path to store all the different CSV files
db_file_path = []
db_file_path.append('dublinbikes_20181001_20190101.csv')
db_file_path.append('dublinbikes_20190401_20190701.csv')
db_file_path.append('dublinbikes_20190701_20191001.csv')
db_file_path.append('dublinbikes_20191001_20200101.csv')
db_file_path.append('dublinbikes_20200101_20200401.csv')
db_file_path.append('dublinbikes_20200401_20200701.csv')
db_file_path.append('dublinbikes_20200701_20201001.csv')

#Define the start and end time for the first and last entry
start_time, end_time = None, None
counter = 0

#Create new dict
data_dict = {}
#Boolean value, will set to false after the first iteration.
first_iteration = True;
#Iterate through file paths
for file_path in db_file_path:
    #Open the file
    with open(file_path, newline='') as csvfile:
        #Create a csvReader
        reader = csv.DictReader(csvfile)
        #Iterate through each in the data
        for row in reader:
            #Select only station to use in the data. Remove this if statement to use data from all stations. Can also be used in a range eg < 50 will give data for 50 stations
            if int(row["STATION ID"]) == 25:
                #Apply regex to generate time
                check_time = re.search('((\d+)\-(\d+)\-(\d+))\s(\d\d)\:(00)',row['TIME'])
                #If regex was found
                if check_time: 
                    #If the row data was between certain times
                    if int(check_time.group(5)) > 6 and int(check_time.group(5)) < 20: 
                        #Create our unique index with unix time and station ID
                        index = str(int(datetime.strptime(check_time.group(0), "%Y-%m-%d %H:%M").timestamp())) + "_" + row["STATION ID"]
                        #Create Dict entry
                        data_dict[index] = {}
                        data_dict[index]["DATE"] = datetime.strptime(check_time.group(1), '%Y-%m-%d').weekday()
                        data_dict[index]["TIME"] = check_time.group(5)
                        data_dict[index]["MONTH"] = check_time.group(3)
                        data_dict[index]["BIKES"] = row['AVAILABLE BIKES']
                
                        #Generate percentage values
                        availability_percentage = (int(row['AVAILABLE BIKES'])/int(row['BIKE STANDS'])) * 100
                        
                        if int(availability_percentage) == 0:
                            data_dict[index]["AVAILABLE"] = 0

                        elif int(availability_percentage) <= 33:
                            data_dict[index]["AVAILABLE"] = 1
                        
                        elif int(availability_percentage) > 33 and int(availability_percentage) < 66:
                            data_dict[index]["AVAILABLE"] = 2

                        elif int(availability_percentage) >= 66 :
                            data_dict[index]["AVAILABLE"] = 3

                        #Get the start and end dates that we will use for our extraction from the weather data
                        if first_iteration:
                            start_time = datetime.strptime(check_time.group(0), "%Y-%m-%d %H:%M").timestamp()
                            first_iteration = False

                        end_time = datetime.strptime(check_time.group(0), "%Y-%m-%d %H:%M").timestamp()

start_time = int(start_time)
end_time = int(end_time)

#Print the start, end and length of the dictionary
print (start_time)
print (end_time)
print (len(data_dict))

#Create Weather Dictionary
weather_dict = {}

#Load in Weather data
with open('weather_data.csv', newline='') as weather_csv_file:
    #Create CSV reader
    weather_reader = csv.DictReader(weather_csv_file)
    #For each row in CSV file
    for weather_row in weather_reader:
        #Apply regex
        check_weather = re.search('((\d\d)\/(\d\d)\/(\d+))\s((\d\d)\:(00))',weather_row['date'])
        #If regex found
        if check_weather:
            #Extract and create unix time
            index = datetime.strptime(check_weather.group(0), "%d/%m/%Y %H:%M").timestamp()
            #If data entry is in between the start and end times of Dublin Bike data
            if index >= start_time and index <= end_time:
                #Convert Index to int
                index = int(index)
                #Create dict entry
                weather_dict[index] = {}
                #There was issues where some values could not be accessed
                try:
                    rain = float(weather_row['rain'])
                except ValueError as error:
                    #If error accessing the value, set it to 0
                    rain = 0;
                finally:
                    #Set the value to either the accessed value or to 0
                        weather_dict[index]['RAIN'] = rain

                #Try access the temperature values
                try:
                     weather_dict[index]['TEMP'] = temp = float(weather_row['temp'])
                except:
                    #Don't store the values
                    continue

#Iterate through the data_dict (Dublin Bus dictionary)
for index in data_dict:
    #Extract the unix time from the index
    check_index = re.search('(\d+)\_\d*',index)
    extracted_index = int(check_index.group(1))
    try:
        #Store the Temperature and Rain data in the Dublin Bus Dictionary
        data_dict[index]['RAIN'] = weather_dict[extracted_index]['RAIN']
        data_dict[index]['TEMP'] = weather_dict[extracted_index]['TEMP']
    except KeyError as error:
        data_dict[index]['RAIN'] = 0
        data_dict[index]['TEMP'] = 0

#Convert the Dict to a Dataframe and dump to CSV
DF = pd.DataFrame(data_dict)
DF = DF.T
DF.fillna(0)
DF = DF[['DATE', 'TIME','MONTH','TEMP','RAIN','BIKES','AVAILABLE']]
DF.to_csv("db_data_station_25.csv")